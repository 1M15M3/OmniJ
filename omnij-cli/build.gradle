// Work-in-progress support for building CLI tools with ShadowJar and RoboVM
plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

configurations {
    robovm
}

dependencies {
    compile project(':omnij-rpc')

    compile "com.msgilligan:bitcoinj-cli:${bitcoinjAddonsVersion}"

    robovm  "org.codehaus.groovy:groovy:${groovyVersion}:grooid"
}

mainClassName = "foundation.omni.cli.ConsensusCLI"
def roboExeName = "btcstatus"

jar {
    manifest {
        attributes 'Implementation-Title': 'BTC/OMNI Status', 'Implementation-Version': version, 'Consensus-Class': mainClassName
    }
}

shadowJar {
    baseName = 'omni-consensus'
    classifier = ''
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        java {
            srcDir 'src/integ/java'
        }
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

task regTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    beforeSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle('\033[1m' + descriptor.getName() + "\033[0m") // bold
        }
    }
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

    systemProperty 'regtest', true
    systemProperties ([ "omni.test.rpcTestUser": rpcTestUser,
                        "omni.test.rpcTestPassword": rpcTestPassword,
    ])
    include 'foundation/omni/cli/**'
}


def homePath = System.properties['user.home']
def roboVMHome = "${homePath}/robovm-1.0.0-beta-04"
def roboLibPath = "robolib"

task copyToRoboLib(type: Copy) {
    into roboLibPath
    from configurations.runtime
}

task roboCompile(type:Exec, dependsOn: [classes, copyToRoboLib]) {
    executable "${roboVMHome}/bin/robovm"
    args '-verbose', '-debug',
            '-cp', "build/classes/main:${roboLibPath}/commons-cli-1.2.jar:${roboLibPath}/jackson-core-2.3.3.jar:${roboLibPath}/jackson-databind-2.3.3.jar:${roboLibPath}/jackson-annotations-2.3.0.jar",
            '-d', 'build',
            '-forcelinkclasses', 'com.android.okhttp.HttpHandler:com.android.org.conscrypt.OpenSSLSocketFactoryImpl',

            '-o', "${roboExeName}",
            "${mainClassName}"
}

task roboRun(type:Exec, dependsOn: roboCompile) {
    executable "build/${roboExeName}"
    args '-rvm:log=debug'
}

def currencyID = 1

task getCoreConsensus(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.consensus.OmniCoreConsensusTool'
    args = [currencyID, 'build/mastercore_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

task getOmniConsensus(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.consensus.OmniwalletConsensusTool'
    args = [currencyID, 'build/omniwallet_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

task getChestConsensus(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.consensus.ChestConsensusTool'
    args = [currencyID, 'build/chest_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

task getConsensus(dependsOn: ['getCoreConsensus', 'getOmniConsensus', 'getChestConsensus']) << {
    logger.info "Consensus files are in build/*_consensus.txt"
}

task runOmniConsensusCLI(dependsOn: 'classes',  type: JavaExec) {
    main = 'foundation.omni.cli.ConsensusCLI'
    args = ['-regtest', '-rpcwait', '-rpcconnect=127.0.0.1', "-property=${currencyID}"]
    classpath = sourceSets.main.runtimeClasspath
}

