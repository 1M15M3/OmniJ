plugins {
    id 'maven'
}

sourceCompatibility = 1.7
group = 'foundation.omni'

dependencies {
    compile project(':bitcoin-rpc')
    compile project(':omnij-core')

    compile "org.codehaus.groovy:groovy:${groovyVersion}"
    compile "org.codehaus.groovy:groovy-json:${groovyVersion}"

    compile "org.codehaus.groovy:groovy-sql:${groovyVersion}"
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'

    testCompile 'com.xlson.groovycsv:groovycsv:1.0'   // Used by Omni STO tests
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        java {
            srcDir 'src/integ/java'
        }
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
}

task regTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    beforeSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle('\033[1m' + descriptor.getName() + "\033[0m") // bold
        }
    }
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

    systemProperty 'regtest', true
    systemProperties ([ "omni.test.rpcTestUser": rpcTestUser,
                        "omni.test.rpcTestPassword": rpcTestPassword,
    ])
    include 'foundation/omni/test/rpc/**', 'foundation/omni/test/tx/**', 'foundation/omni/cli/**'
}

task consensusTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true

    systemProperty 'regtest', false
    systemProperties ([ "omni.test.rpcTestUser": rpcTestUser,
                        "omni.test.rpcTestPassword": rpcTestPassword,
                        "omni.test.stableOmniRpcHost": stableOmniRpcHost,
                        "omni.test.stableOmniRpcUser": stableOmniRpcUser,
                        "omni.test.stableOmniRpcPassword": stableOmniRpcPassword
    ])
    include 'foundation/omni/test/consensus/**'
}


