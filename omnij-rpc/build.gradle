plugins {
    id 'maven'
}

dependencies {
    compile project(':omnij-core')
    compile project(':omnij-dsl')       // TODO: Shouldn't this be only for the tests, eg. testCompile?

    compile "com.msgilligan:bitcoinj-rpcclient:${bitcoinjAddonsVersion}"
    compile "com.msgilligan:bitcoinj-groovy:${bitcoinjAddonsVersion}"

    compile "org.codehaus.groovy:groovy:${groovyVersion}"
    compile "org.codehaus.groovy:groovy-json:${groovyVersion}"

    compile "org.codehaus.groovy:groovy-sql:${groovyVersion}"
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'

    testCompile 'com.xlson.groovycsv:groovycsv:1.0'   // Used by Omni STO tests
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        java {
            srcDir 'src/integ/java'
        }
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

/** Base class for integration tests
 */
class IntegrationTest extends Test {
    public IntegrationTest() {
        testClassesDir = project.sourceSets.integrationTest.output.classesDir
        classpath = project.sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
            displayGranularity = -1
        }
        beforeSuite { descriptor ->
            if (descriptor.className != null) {
                logger.lifecycle("\033[1m$descriptor.name\033[0m") // bold
            }
        }
        beforeTest { descriptor ->
            logger.lifecycle("    $descriptor.name")
        }
    }
}

/** Base class for integration tests in regtest mode
 */
class RegTest extends IntegrationTest {
    public RegTest() {
        systemProperty 'regtest', true
        systemProperties ([ 'omni.test.rpcTestUser': project.rpcTestUser,
                            'omni.test.rpcTestPassword': project.rpcTestPassword,
        ])
    }
}

task integrationTest(type: IntegrationTest) {
    description = 'Runs Bitcoin and Omni Core integration tests.'
}

task activationRegTest(type: RegTest) {
    description = 'Tests Omni Protocol feature activations in regtest mode.'

    include 'foundation/omni/test/rpc/activation/*'
}

task regTest(type: RegTest, dependsOn: 'activationRegTest') {
    description = 'Tests Omni Core RPC calls against an instance of omnicored running in regtest mode.'

    include 'foundation/omni/test/rpc/**', 'foundation/omni/test/scripts/**', 'foundation/omni/test/tx/**'
    exclude 'foundation/omni/test/rpc/activation/*'
}

task consensusTest(type: IntegrationTest) {
    description = 'Compares balances for multiple Omni Protocol currencies against public data providers.'

    systemProperty 'regtest', false
    systemProperties ([ "omni.test.rpcTestUser": rpcTestUser,
                        "omni.test.rpcTestPassword": rpcTestPassword,
                        "omni.test.stableOmniRpcHost": stableOmniRpcHost,
                        "omni.test.stableOmniRpcUser": stableOmniRpcUser,
                        "omni.test.stableOmniRpcPassword": stableOmniRpcPassword
    ])
    include 'foundation/omni/test/consensus/**'
}
